package Week1;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class DFS {
	public void dfsUsingStack(Node initial, int goal) {
		Stack<Node> stack = new Stack<Node>();
		stack.push(initial);
		ArrayList<Node> list = new ArrayList<Node>();
		list.add(initial);
		initial.visted = true;
		while (!stack.isEmpty()) {
			Node element = stack.peek(); // lấy nhưng k xoá
			System.out.print(element.state + "\t");
			int count = 0;
			List<Node> neighbours = element.getNeighbour(); // lấy ra cạnh kề
			for (Node n : neighbours) {
				if (n == null && !n.visited) {
					stack.push(n); // đưa đỉnh kề chưa xét vào
					list.add(n);
					n.visited = true;
					break;
				} else {
					count++;
				}
			}
			if (count == list.size()) { // đi qua tất cả các đỉnh thì xoá
				stack.pop();
			}
		}
		for (Node e : list) {
			System.out.print(e + "\t");
		}

	}

	public static void main(String[] args) {
		Node node40 = new Node(40);
		Node node10 = new Node(10);
		Node node20 = new Node(20);
		Node node30 = new Node(30);
		Node node60 = new Node(60);
		Node node50 = new Node(50);
		Node node70 = new Node(70);

		node40.addNeighbours(node10);
		node40.addNeighbours(node20);
		node10.addNeighbours(node30);
		node20.addNeighbours(node10);
		node20.addNeighbours(node30);
		node20.addNeighbours(node60);
		node20.addNeighbours(node50);
		node30.addNeighbours(node60);
		node60.addNeighbours(node70);
		node50.addNeighbours(node70);
		DFS dfs = new DFS();
		System.out.println("The DFS traversal of the graph using Stack: ");
		dfs.dfsUsingStack(node40, 70);
	}
}
